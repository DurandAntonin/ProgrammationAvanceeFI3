Compte rendu mini projet Perceptron avec images

L'objectif de ce projet est de de créer un réseau de neurones simple, d'entraîner le modèle pour qu'il puisse prédire la classe de l'image qu'on lui donne.
Les images que nous allons utilisées sont des images de chats ou de chiens. Le but est de prédire si une image contient un chat (dans ce cas le label associé à cette dernière est de 1), sinon elle contient un chien, et le label associé à cette dernière vaudra 0.
Pour ce faire, j'ai utilisé le site Kaggle, qui fournit de nombreux jeux de données, notamment des jeux de données pour la classification d'images où chacune contient un chat ou un chien.

Comme tout problème de machine learning, la première phase est le choix des données. Comme énoncé précédemment, on veut que notre modèle prédise si une image contient un chat ou un chien, ainsi j'ai téléchargé un premier dataset qui va servir à entraîner le modèle. Ce dataset contient 2023 images au total de taille différentes.
J'ai aussi téléchargé un deuxième dataset d'images de chiens et de chats qui va nous servir à tester notre modèle une fois entraîné.

La deuxième étape est l'adaptation des données, pour qu'elles soient utilisables  et comprises par notre modèle. En effet, nous avons des données sous format .jpg, cependant notre modèle n'accepte que les matrices du fait des différents calculs matriciels effectués, notamment pour trouver les paramètre w et b.
Pour ce faire, j'ai utilisé la librairie python opencv pour ouvrir chaque image en mode « graysclate ». On obtient une matrice de taille n*n*1 . Ce mode permet d'obtenir une seule couleur pour chaque pixel de l'image au lieu des 3 couleurs RGB.
Ensuite, après avoir ouvert l'image, on la redimensionne pour que chaque image ait la même taille, ainsi que pour éviter d'avoir de trop grandes matrices.
Puis, on enregistre l'image transformée en matrice dans une liste 'x', et le label associé à cette dernière dans une liste 'y'. 
Enfin, après avoir traité 1000 images par exemple, de taille 64 par 64 pixels, la matrice x aura la forme (1000,64,64,1) et la matrice y aura la forme (1000,).
Il ne nous reste plus qu'à enregistrer ces 2 matrices dans un fichier spécial de type hdf5. Ce format permet de sauvegarder et de structurer d'importantes données, et permet dans notre cas de pouvoir stocker de nombreuses images et les récupérer sans avoir à les retransformer en matrices si on veut entraîner le modèle plusieurs fois.

La troisième étape est le choix du modèle, dans notre cas nous allons utiliser un modèle de neurones artificiels simple avec uniquement 1 seul neurone. La fonction d'activation de ce dernier sera ainsi la prédiction de l'image sous forme de matrice.

La quatrième étape est le choix de la fonction coût pour évaluer les performances de notre modèle et pour l'entraîner. Comme pour le modèle de prédiction de l'admission ou non d'un élève, nous allons utiliser la fonction logarithme.

La cinquième étape est l'entraînement de notre modèle. Comme dans l'exercice précédent, on utilise la descente de gradient pour optimiser la fonction coût et trouver des paramètre w et b qui minimisent cette dernière à chaque itération.

Enfin, la cinquième étape est le test de notre modèle, où on vérifie si ce dernier permet de prédire efficacement le label associés à de nouvelles images, i.e si les paramètre w et b trouvés permettent de prédire si l'image est une image de chat ou bien une image de chien. Pour ce faire, nous allons importé les images de notre dataset de test, puis comme pour les images de notre dataset d'entraînement, nous allons convertir chaque image en matrice, stockée dans une matrice 'x', puis dans une matrice 'y' sera stockée le label que chacune de ces dernières.
On passe cette nouvelle matrice d'images x au réseau de neurones qui nous renvoie les labels y_pred qu'il a prédit. Enfin, on compare la matrice y_pred à la matrice y pour voir le pourcentage de précision de notre modèle.
